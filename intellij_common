#!/bin/bash

checknode() {
	NODEJS=$(which nodejs 2> /dev/null)

	if [ "" == "$NODEJS" ]; then
		NODEJS=$(which node 2> /dev/null)
	fi

	if [ "" == "$NODEJS" ]; then
		echo "Please install node.js"
		exit 1
	fi

	pushd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null

	echo 'Running npm/yarn to update script dependencies'

	if [ "" != "$(which yarn 2> /dev/null)" ]; then
		yarn
	else
		npm install
	fi

	popd > /dev/null
}

copylibs() {
	if [ ! -d modules ] || [ ! -d .gradle ] || [ -f build.xml ]; then
		return 0
	fi

	if [ ! -d ../liferay-binaries-cache-2017 ]; then
		"$NODEJS" "${SCRIPT_FOLDER}/bin/pom.js" "$PWD" "$@"

		mvn  --fail-at-end dependency:go-offline
		grep '<module>.*</module>' pom.xml | awk -F'[<>]' '{ print $3 "/pom.xml" }' | xargs rm
		rm pom.xml

		mkdir -p .gradle
	fi

	for folder in development global portal; do
		if [ ! -f lib/$folder/dependencies.properties ]; then
			continue
		fi

		for dependency in $(cat lib/$folder/dependencies.properties); do
			local lib_jar=lib/$folder/$(echo $dependency | cut -d'=' -f 1).jar

			if [ -f $lib_jar ]; then
				continue
			fi

			local group_gradle=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 1)
			local group_maven=$(echo $group_gradle | tr '.' '/')
			local name=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 2)
			local version=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 3)

			local maven_path=$HOME/.m2/repository/${group_maven}/${name}/${version}/${name}-${version}.jar

			if [ -f $maven_path ]; then
				cp $maven_path $lib_jar
			fi

			local gradle_path=../liferay-binaries-cache-2017/.gradle/caches/modules-2/files-2.1/${group_gradle}/${name}/${version}

			if [ -d $gradle_path ]; then
				local gradle_jar=$(find $gradle_path -name ${name}-${version}.jar)

				if [ "" != "$gradle_jar" ]; then
					cp $gradle_jar $lib_jar
				fi
			fi
		done
	done
}

ignoreiml() {
	if [ -d .git ] || [ -f .git ]; then
		git ls-files | grep '\(\.idea\|\.iml\)' | xargs git update-index --assume-unchanged
	fi
}

setantopts() {
	JAVA_VERSION=$(java -version 2>&1 | head -1 | cut -d'"' -f 2 | cut -d'.' -f 2)

	ANT_OPTS='-Xms2g -Xmx2g'

	if [[ 8 -gt $JAVA_VERSION ]]; then
		ANT_OPTS="$ANT_OPTS -XX:MaxPermSize=1g"
	fi

	export ANT_OPTS
}

setuplibs() {
	rm -rf .idea/libraries

	if [ ! -f build.xml ]; then
		return 0
	fi

	local NEEDS_SETUP_LIBS=

	for folder in development global portal; do
		if [ -f "lib/$folder/dependencies.properties" ] && [[ $(find lib/$folder -name '*.jar' | wc -l) -lt $(cat "lib/$folder/dependencies.properties" | wc -l) ]]; then
			NEEDS_SETUP_LIBS=true
		fi
	done

	if [ "" == "$NEEDS_SETUP_LIBS" ]; then
		return 0
	fi

	setantopts

	echo 'Running ant setup-libs to initialize portal libraries'

	ant setup-libs
}

setupsdk() {
	if [ ! -f build.xml ] || [ ! -d modules ] || [ -d tools/sdk ]; then
		return 0
	fi

	setantopts

	echo 'Running ant setup-sdk to initialize gradle configuration'

	ant setup-sdk
}

setupwork() {
	if [ -d portal-impl ] || [ ! -f build-working-dir.xml ]; then
		return 0
	fi

	local LOCAL_BRANCH=$(grep -o '`[^`]*`' "README.markdown" | cut -d'`' -f 2 | uniq)

	if [ "" == "$LOCAL_BRANCH" ]; then
		LOCAL_BRANCH=7.0.x
	fi

	local UPSTREAM_BRANCH=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/$LOCAL_BRANCH$" | cut -d'/' -f 3,4)

	local WORKING_DIR_HASH=$(cat git-commit-portal)

	git merge-base $UPSTREAM_BRANCH $WORKING_DIR_HASH > /dev/null

	if [[ 0 -ne $? ]]; then
		echo "Specified $LOCAL_BRANCH hash not available, fetching latest $UPSTREAM_BRANCH"

		git fetch --no-tags $(echo $UPSTREAM_BRANCH | tr '/' ' ')
	fi

	ant -f build-working-dir.xml
}

setupwork

if [ ! -d portal-impl ]; then
	echo 'Unable to find portal-impl folder, the current working directory does not appear to be the portal source'
	echo 'Please navigate to the portal source folder and then re-run your command'
	echo 'Note: additional arguments are additional source roots (blade workspaces, subrepositories, plugins SDK, etc.)'
	exit 1
fi